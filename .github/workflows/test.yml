name: Xiangqi Translator Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install package and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v
    
    - name: Run quick test
      run: |
        python test.py
    
    - name: Run ambiguity test
      run: |
        python tests/test_ambiguous_moves.py
    
    - name: Run examples
      run: |
        python examples/basic_usage.py

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Performance benchmark
      run: |
        python -c "
        import time
        from xiangqi_translator import translate_from_fen, get_initial_board
        
        # Performance test
        fen = get_initial_board().to_fen()
        start_time = time.time()
        
        for i in range(100):
            result = translate_from_fen(fen, '炮二平五')
            assert result.success, f'Translation failed: {result.error_message}'
        
        end_time = time.time()
        avg_time = (end_time - start_time) / 100
        
        print(f'Average translation time: {avg_time:.4f}s')
        assert avg_time < 0.01, f'Translation too slow: {avg_time:.4f}s'
        print('✓ Performance test passed')
        " 